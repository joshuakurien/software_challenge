// Generated by gencpp from file software_training_assignment/Distance.msg
// DO NOT EDIT!


#ifndef SOFTWARE_TRAINING_ASSIGNMENT_MESSAGE_DISTANCE_H
#define SOFTWARE_TRAINING_ASSIGNMENT_MESSAGE_DISTANCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace software_training_assignment
{
template <class ContainerAllocator>
struct Distance_
{
  typedef Distance_<ContainerAllocator> Type;

  Distance_()
    : xDistance(0)
    , yDistance(0)
    , distance(0)  {
    }
  Distance_(const ContainerAllocator& _alloc)
    : xDistance(0)
    , yDistance(0)
    , distance(0)  {
  (void)_alloc;
    }



   typedef uint32_t _xDistance_type;
  _xDistance_type xDistance;

   typedef uint32_t _yDistance_type;
  _yDistance_type yDistance;

   typedef uint32_t _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::software_training_assignment::Distance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::software_training_assignment::Distance_<ContainerAllocator> const> ConstPtr;

}; // struct Distance_

typedef ::software_training_assignment::Distance_<std::allocator<void> > Distance;

typedef boost::shared_ptr< ::software_training_assignment::Distance > DistancePtr;
typedef boost::shared_ptr< ::software_training_assignment::Distance const> DistanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::software_training_assignment::Distance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::software_training_assignment::Distance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::software_training_assignment::Distance_<ContainerAllocator1> & lhs, const ::software_training_assignment::Distance_<ContainerAllocator2> & rhs)
{
  return lhs.xDistance == rhs.xDistance &&
    lhs.yDistance == rhs.yDistance &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::software_training_assignment::Distance_<ContainerAllocator1> & lhs, const ::software_training_assignment::Distance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace software_training_assignment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::software_training_assignment::Distance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::software_training_assignment::Distance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::software_training_assignment::Distance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::software_training_assignment::Distance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::software_training_assignment::Distance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::software_training_assignment::Distance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::software_training_assignment::Distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd9e80af1a4aa422f1993f6c21a12fac";
  }

  static const char* value(const ::software_training_assignment::Distance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd9e80af1a4aa422ULL;
  static const uint64_t static_value2 = 0xf1993f6c21a12facULL;
};

template<class ContainerAllocator>
struct DataType< ::software_training_assignment::Distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "software_training_assignment/Distance";
  }

  static const char* value(const ::software_training_assignment::Distance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::software_training_assignment::Distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 xDistance\n"
"uint32 yDistance\n"
"uint32 distance\n"
;
  }

  static const char* value(const ::software_training_assignment::Distance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::software_training_assignment::Distance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xDistance);
      stream.next(m.yDistance);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Distance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::software_training_assignment::Distance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::software_training_assignment::Distance_<ContainerAllocator>& v)
  {
    s << indent << "xDistance: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.xDistance);
    s << indent << "yDistance: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.yDistance);
    s << indent << "distance: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOFTWARE_TRAINING_ASSIGNMENT_MESSAGE_DISTANCE_H
