// Generated by gencpp from file software_training_assignment/MoveFeedback.msg
// DO NOT EDIT!


#ifndef SOFTWARE_TRAINING_ASSIGNMENT_MESSAGE_MOVEFEEDBACK_H
#define SOFTWARE_TRAINING_ASSIGNMENT_MESSAGE_MOVEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace software_training_assignment
{
template <class ContainerAllocator>
struct MoveFeedback_
{
  typedef MoveFeedback_<ContainerAllocator> Type;

  MoveFeedback_()
    : distance(0.0)  {
    }
  MoveFeedback_(const ContainerAllocator& _alloc)
    : distance(0.0)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::software_training_assignment::MoveFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::software_training_assignment::MoveFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MoveFeedback_

typedef ::software_training_assignment::MoveFeedback_<std::allocator<void> > MoveFeedback;

typedef boost::shared_ptr< ::software_training_assignment::MoveFeedback > MoveFeedbackPtr;
typedef boost::shared_ptr< ::software_training_assignment::MoveFeedback const> MoveFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::software_training_assignment::MoveFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::software_training_assignment::MoveFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::software_training_assignment::MoveFeedback_<ContainerAllocator1> & lhs, const ::software_training_assignment::MoveFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::software_training_assignment::MoveFeedback_<ContainerAllocator1> & lhs, const ::software_training_assignment::MoveFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace software_training_assignment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::software_training_assignment::MoveFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::software_training_assignment::MoveFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::software_training_assignment::MoveFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::software_training_assignment::MoveFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::software_training_assignment::MoveFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::software_training_assignment::MoveFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::software_training_assignment::MoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e77fb10f0c8b4833ec273aa9ac74459";
  }

  static const char* value(const ::software_training_assignment::MoveFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e77fb10f0c8b483ULL;
  static const uint64_t static_value2 = 0x3ec273aa9ac74459ULL;
};

template<class ContainerAllocator>
struct DataType< ::software_training_assignment::MoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "software_training_assignment/MoveFeedback";
  }

  static const char* value(const ::software_training_assignment::MoveFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::software_training_assignment::MoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float32 distance\n"
;
  }

  static const char* value(const ::software_training_assignment::MoveFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::software_training_assignment::MoveFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::software_training_assignment::MoveFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::software_training_assignment::MoveFeedback_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOFTWARE_TRAINING_ASSIGNMENT_MESSAGE_MOVEFEEDBACK_H
